What are some examples of how PHP and JavaScript are alike and how they differ?

One similarity between PHP and JavaScript is they are both scripting languages meaning that they are interpreted rather than compiles. That means they are translated into machine code rather than directly. Another similarity is that they are both weakly types this means that when you create a variable in either language, you donâ€™t need to assign its data type, rather it is assumed. They are also dynamically types meaning you can change the type easily by redefining it in your code. One difference between the two is PHP is a server-side scripting language meaning that it runs on the web server as opposed to a client machine. Javascript is a client side language so its runs on a users laptop, phone, or tablet. PHP is also ran on the backend of a website but Javascript is traditionally ran on the frontend, however now it is more a full-stack language. One last different is php has built-in functions and extensions for server-side tasks, such as accessing databases and handling server files. JavaScript has access to a wide range of APIs provided by web browsers for manipulating web page content and handling user interactions. With Node.js, it also gains access to server-side functionalities.

Define MVC, what are the responsibilities of each piece?

MVC stands for Model-View-Controller, a software architectural pattern commonly used in the development of web applications. It separates an application into three interconnected components, each with distinct responsibilities, to organize the code in a way that separates internal representations of information from the ways information is presented to and accepted from the user. The model piece represents the data and the business logic of the application. It is responsible for accessing and storing data, as well as defining the rules for how the data can be changed and manipulated. The view piece is responsible for presenting data to the user. It displays data from the model to the user and generates the user interface, which can change dynamically based on changes in the model. Lastly, the controller piece is responsible and is basically an intermediary between the model and the view. It listens to user inputs communicated through the view, processes them, and returns the output display (view) to the user. 
